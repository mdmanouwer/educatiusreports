<?php

/**
 * @file
 * Contains base customizations for midleton.
 */

define('MIDLETON_BASE_COORDINATOR_ROLE', 'Coordinator');

define('MIDLETON_BASE_CHIEF_COORDINATOR_ROLE', 'Manager');

define('MIDLETON_MIDLETON_ROLE', 'Educatius Master');


/**
 * Implements hook_menu().
 */
function midleton_base_menu() {
  $menu['send-report/%node'] = [
    'title' => 'Are you sure you want to proceed?',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['midleton_base_change_report_status_form'],
    'access callback' => 'midleton_base_change_report_status_form_access',
    'access arguments' => [1],
    'file' => 'midleton_base.pages.inc',
    'file path' => drupal_get_path('module', 'midleton_base') . '/includes',
  ];

  $menu['generate-pdf/%node'] = [
    'title' => 'Generate PDF?',
    'page callback' => 'midleton_base_generate_pdf',
    'page arguments' => [1],
    'access callback' => 'midleton_base_generate_pdf_access',
    'access arguments' => [1],
    'file' => 'midleton_base.pages.inc',
    'file path' => drupal_get_path('module', 'midleton_base') . '/includes',
  ];

  $menu['midleton/message-settings'] = [
    'title' => 'Message settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['midleton_base_message_settings'],
    'access arguments' => ['access notification message settings'],
    'type' => MENU_LOCAL_TASK,
    'weight' => 99,
    'file' => 'midleton_base.pages.inc',
    'file path' => drupal_get_path('module', 'midleton_base') . '/includes',
  ];

  $menu['send-email/%midleton_student'] = [
    'title' => 'Send email',
    'page callback' => 'midleton_base_send_email_form',
    'access arguments' => ['send emails'],
    'page arguments' => [1],
    'file' => 'midleton_base.pages.inc',
    'file path' => drupal_get_path('module', 'midleton_base') . '/includes',
  ];
  return $menu;
}

/**
 * Access callback for send report page.
 */
function midleton_base_change_report_status_form_access($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  if ($wrapper->field_status->raw() == "sent") {
    return FALSE;
  }
  elseif ($wrapper->field_status->raw() == "approved") {
    if (!empty($wrapper->field_pdf->value())) {
      return node_access('update', $node);
    }
    else {
      return FALSE;
    }
  }
  else {
    return node_access('update', $node);
  }
}

/**
 * Access callback to generate a PDF from an approved Report.
 */
function midleton_base_generate_pdf_access($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $status = $wrapper->field_status->raw();
  if (empty($wrapper->field_pdf->value()) &&
    ($status == "sent" || $status == "approved")
  ) {
    return node_access('update', $node);
  }
  return FALSE;
}

/**
 * Student upcaster.
 */
function midleton_student_load($id) {
  return entity_load_single('student', $id);
}


/**
 * Implements hook_menu_alter().
 */
function midleton_base_menu_alter(&$items) {
  $items['user/%user']['access callback'] = '_midleton_base_user_view_access';
  $items['node/%node/revisions']['access callback'] = 'user_access';
  $items['node/%node/revisions']['access arguments'] = ['view revision overview'];
  $items['node/%node/revisions/view']['access callback'] = 'user_access';
  $items['node/%node/revisions/view']['access arguments'] = ['view revision overview'];
  $items['user/%user/edit']['access callback'] = 'midleton_base_user_edit_access';
  $items['user/%user/edit']['access arguments'] = [1, 'edit'];
  $items['user/%user/cancel']['access callback'] = 'midleton_base_user_edit_access';
  $items['user/%user/cancel']['access arguments'] = [1, 'cancel'];
  $items['user/%user/cancel/confirm/%/%']['access callback'] = 'midleton_base_user_edit_access';
  $items['user/%user/cancel/confirm/%/%']['access arguments'] = [1, 'cancel'];
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/add']['access arguments'] = ['add school years'];
  $items['node/add']['title'] = 'Add report';
}

/**
 * Implements hook_module_implements_alter().
 */
function midleton_base_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'menu_alter' || $hook == "form_alter") {
    $group = $implementations['midleton_base'];
    unset($implementations['midleton_base']);
    $implementations['midleton_base'] = $group;
  }
}

/**
 * Access callback for editing users.
 */
function midleton_base_user_edit_access($account, $op, $arg3 = NULL, $arg4 = NULL) {

  global $user;
  switch ($op) {
    case 'edit':
      $callback = 'userprotect_user_edit_access';
      break;
    case 'cancel':
      $callback = 'user_cancel_access';
      break;
  }

  $chief_rid = user_role_load_by_name(MIDLETON_BASE_CHIEF_COORDINATOR_ROLE)->rid;

  $coordinator_rid = user_role_load_by_name(MIDLETON_BASE_COORDINATOR_ROLE)->rid;

  if (user_has_role($chief_rid, $user)) {
    if ($user->uid == $account->uid) {
      return $callback($account);
    }
    elseif (!user_has_role($coordinator_rid, $account)) {
      return FALSE;
    }
    else {
      // Only editing of own coordinators.
      if ($account->field_user_superior[LANGUAGE_NONE][0]['target_id'] == $user->uid) {
        return $callback($account);
      }
      else {
        return FALSE;
      }
    }
  }
  return $callback($account);
}

/**
 * Implements hook_entity_info_alter().
 */
function midleton_base_entity_info_alter(&$entity_info) {
  // Alter entity access for students.
  $entity_info['student']['access callback'] = 'midleton_base_student_access';
  $entity_info['document']['access callback'] = 'midleton_base_document_access';
  $entity_info['email']['access callback'] = 'midleton_base_email_access';
}

/**
 * Implements hook_permissions.
 */
function midleton_base_permission() {
  return [
    'view own student entities' => [
      'title' => t('View own student entities'),
    ],
    'update own student entities' => [
      'title' => t('Edit own student entities'),
    ],
    'delete own student entities' => [
      'title' => t('Delete own student entities'),
    ],
    'view revision overview' => [
      'title' => t('Access the revision overview page'),
    ],
    'access pdf download' => [
      'title' => t('Access PDF Download'),
    ],
    'access notification message settings' => [
      'title' => t('Access notification message settings'),
    ],
    'add school years' => [
      'title' => t('Add school years'),
    ],
    'send emails' => [
      'title' => t('Send emails'),
    ]
  ];
}


/**
 * Implements hook_entity_property_info_alter().
 */
function midleton_base_entity_property_info_alter(&$info) {
  $info['node']['properties']['pdf_link'] = [
    'label' => t('Link PDF'),
    'description' => t('Link to the downloadable PDF.'),
    'type' => 'text',
    'computed' => TRUE,
    'getter callback' => 'midleton_base_pdf_link',
    'entity views field' => TRUE,
    'sanitized' => TRUE,
  ];
  $info['node']['properties']['pdf_generate_link'] = [
    'label' => t('Link Generate PDF'),
    'description' => t('Link for generating PDF.'),
    'type' => 'text',
    'computed' => TRUE,
    'getter callback' => 'midleton_base_pdf_generate_link',
    'entity views field' => TRUE,
    'sanitized' => TRUE,
  ];
  $info['node']['properties']['change_status'] = [
    'label' => t('Change Status'),
    'description' => t('Button to change the status.'),
    'type' => 'text',
    'computed' => TRUE,
    'getter callback' => 'midleton_base_change_status_button',
    'entity views field' => TRUE,
    'sanitized' => TRUE,
  ];
}


/**
 * Access callback for student entities.
 */
function midleton_base_student_access($op, $entity, $account, $entity_type_name) {
  switch ($op) {
    case 'create':
      return user_access('eck add student student entities', $account);
      break;
    case 'view':
    case 'update':
    case 'delete':
      $op_eck = $op == 'update' ? 'edit' : $op;
      $access = user_access('eck ' . $op_eck . ' student student entities', $account);
      if ($access) {
        return $access;
      }
      else {
        if (is_object($entity)) {
          $coordinator = $entity->field_coordinator[LANGUAGE_NONE][0]['target_id'];
          global $user;
          $coordinator_rid = user_role_load_by_name(MIDLETON_BASE_COORDINATOR_ROLE);
          $chief_coordinator_rid = user_role_load_by_name(MIDLETON_BASE_CHIEF_COORDINATOR_ROLE);
          if (isset($user->roles[$coordinator_rid->rid])) {
            if ($coordinator == $user->uid) {
              return user_access($op . ' own student entities', $user);
            }
          }
          elseif (isset($user->roles[$chief_coordinator_rid->rid])) {
            $query = new EntityFieldQuery();
            $result = $query->entityCondition('entity_type', 'user')
              ->fieldCondition('field_user_superior', 'target_id', $user->uid)
              ->execute();
            if (!empty($result) || in_array($coordinator, array_keys($result['user']))) {
              return user_access($op . ' own student entities', $user);
            }
          }
        }
      }
      break;
  }
}


/**
 * Access callback for document entities.
 */
function midleton_base_document_access($op, $entity, $account, $entity_type_name) {
  if ("create" == $op) {
    return TRUE;
  }
  else {
    // Other CRUD actions depend on access to the parent student.
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'student')
      ->fieldCondition('field_documents', 'target_id', $entity->id)
      ->execute();
    $student_id = array_keys($result['student'])[0];
    $student = entity_load_single('student', $student_id);
    return entity_access($op, 'student', $student, $account);
  }
}


/**
 * Access callback for email entities.
 */
function midleton_base_email_access($op, $entity, $account, $entity_type_name) {
  return FALSE;
}


/**
 * Midleton_base_get_status_id
 */
function midleton_base_get_status_id($status) {
  $statusses = [
    'new',
    'approval_pending',
    'approved',
    'sent'
  ];
  return array_search($status, $statusses);
}

/**
 * Implements hook_node_access_records().
 */
function midleton_base_node_access_records($node) {

  $grants = [];

  $types = array_keys(midleton_base_get_report_types());

  if (in_array($node->type, $types) && $node->status) {

    $status = $node->field_status[LANGUAGE_NONE][0]['value'];

    $grants[] = [
      'realm' => 'view-update-delete-' . $node->uid,
      'gid' => midleton_base_get_status_id($status),
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 0,
    ];
    $grants[] = [
      'realm' => 'view-update-' . $node->uid,
      'gid' => midleton_base_get_status_id($status),
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    ];
    $grants[] = [
      'realm' => 'view-' . $node->uid,
      'gid' => midleton_base_get_status_id($status),
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    ];
    $grants[] = [
      'realm' => 'midleton',
      'gid' => 999,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 0,
    ];
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function midleton_base_node_grants($account, $op) {

  $grants = [];

  if (in_array('Coordinator', array_values($account->roles))) {
    $grants['view-update-delete-' . $account->uid][] = midleton_base_get_status_id('new');
    $grants['view-' . $account->uid][] = midleton_base_get_status_id('approval_pending');
    $grants['view-' . $account->uid][] = midleton_base_get_status_id('approved');
    $grants['view-' . $account->uid][] = midleton_base_get_status_id('sent');
  }
  if (in_array('Manager', array_values($account->roles))) {
    $coordinators = db_select('field_data_field_user_superior', 'f')
      ->fields('f', ['entity_id'])
      ->condition('field_user_superior_target_id', $account->uid)
      ->execute()
      ->fetchAllAssoc('entity_id');

    foreach (array_keys($coordinators) as $coordinator_uid) {
      $grants['view-' . $coordinator_uid][] = midleton_base_get_status_id('new');
      $grants['view-' . $coordinator_uid][] = midleton_base_get_status_id('approval_pending');
      $grants['view-' . $coordinator_uid][] = midleton_base_get_status_id('approved');
      $grants['view-' . $coordinator_uid][] = midleton_base_get_status_id('sent');
    }
  }
  if (in_array('Educatius Master', array_values($account->roles))) {
    $grants['midleton'] = [999];
  }
  return $grants;
}


/**
 * Implements hook_form_alter().
 */
function midleton_base_form_alter(&$form, &$form_state, $form_id) {
  $reports = array_keys(midleton_base_get_report_types());
  array_walk($reports, function (&$item) {
    $item .= '_node_form';
  });

  if (in_array($form_id, $reports)) {

    field_group_hide_field_groups($form, ['group_hidden']);


    // Remove PDF and force regeneration
    $form['actions']['submit']['#submit'][] = 'midleton_base_reset_pdf_form_submit';

    // Unset title field (set in code).
    unset($form['title']);

    global $user;
    if ($user->uid != 1 || !in_array('administrator', $user->roles)) {
      $form['field_status']['#access'] = FALSE;
    }

    if (user_has_role(11, $user)) {
      $form['field_status']['#access'] = TRUE;
    }

    $form['actions']['submit']['#value'] = t('Save');

    $node = $form['#node'];
    $wrapper = entity_metadata_wrapper('node', $node);
    $status = $wrapper->field_status->value();
    switch ($status) {
      case 'new':
        $label = t('Save and send to the  Manager');
        break;

      case 'approval_pending':
        $label = t('Save, approve and generate PDF');
        break;
      case 'approved':
        /*if (!empty($wrapper->field_pdf->value())) {
          $label = t('Send this report by email');
        }*/
        /*
        foreach (element_children($form) as $field) {
          if ($field != 'actions' && $field != 'field_status') {
            $form[$field]['#disabled'] = TRUE;
          }
        }
        unset($form['actions']['submit']);
        */
        drupal_set_message(t('Please be aware that you are editing 
        a report that has been approved. The PDF will have to be regenerated
        manually.'), 'warning');
        break;
      case 'sent':
        /*
        foreach (element_children($form) as $field) {
          if ($field != 'actions' && $field != 'field_status') {
            $form[$field]['#disabled'] = TRUE;
          }
        }*/
        $form['actions']['submit']['#value'] = t('Save changes');
        drupal_set_message(t('Please be aware that you are editing 
        a report that has been approved and sent by email. The PDF will have to
        be regenerated manually.'), 'warning');

    }

    if ($label) {
      $form['actions']['save_and_send'] = [
        '#weight' => 5,
        '#type' => 'submit',
        '#value' => $label,
        '#submit' => ['midleton_base_report_save_and_send_submit'],
      ];
    }

    if ($user->uid != 1 && isset($node->field_student_reference) && $node->field_status[LANGUAGE_NONE][0]['value'] != 'new') {
      $form['field_student_reference'][LANGUAGE_NONE]['#disabled'] = TRUE;
    }
    else {
      $options = $form['field_student_reference'][LANGUAGE_NONE]['#options'];
      $coordinator_rid = user_role_load_by_name(MIDLETON_BASE_COORDINATOR_ROLE);
      $chief_coordinator_rid = user_role_load_by_name(MIDLETON_BASE_CHIEF_COORDINATOR_ROLE);
      if (isset($user->roles[$coordinator_rid->rid]) || isset($user->roles[$chief_coordinator_rid->rid])) {
        foreach ($options as $option => $option_value) {
          if (is_numeric($option)) {
            $student = entity_load_single('student', $option);
            $wrapper = entity_metadata_wrapper('student', $student);
            if (isset($user->roles[$coordinator_rid->rid])) {
              if ($wrapper->field_coordinator->raw() != $user->uid) {
                unset($form['field_student_reference'][LANGUAGE_NONE]['#options'][$option]);
              }
            }
            else {
              $query = new EntityFieldQuery();
              $result = $query->entityCondition('entity_type', 'user')
                ->fieldCondition('field_user_superior', 'target_id', $user->uid)
                ->execute();
              if (empty($result) || !in_array($wrapper->field_coordinator->raw(), array_keys($result['user']))) {
                unset($form['field_student_reference'][LANGUAGE_NONE]['#options'][$option]);
              }
            }
          }
        }
      }
    }
  }
  if ($form_id == "eck__entity__form_add_student_student") {
    $role_to_check = user_role_load_by_name(MIDLETON_BASE_COORDINATOR_ROLE);
    global $user;
    if (isset($user->roles[$role_to_check->rid])) {
      $form['field_coordinator'][LANGUAGE_NONE]['#options'] = [$user->uid => $user->name];
    }
  }
  if ($form_id == "eck__entity__form_edit_student_student") {
    $role_to_check = user_role_load_by_name(MIDLETON_BASE_COORDINATOR_ROLE);
    global $user;
    if (isset($user->roles[$role_to_check->rid])) {
      $form['field_coordinator'][LANGUAGE_NONE]['#disabled'] = TRUE;
    }

    // Add delete button.
    $delete_menu = menu_get_item('student/student/' . $form['#entity']->id . '/delete');
    if ($delete_menu['access']) {
      $form['actions']['delete'] = [
        '#type' => 'submit',
        '#value' => t('Delete'),
        '#submit' => ['midleton_base_delete_student_confirm'],
        '#weight' => 999999,
      ];
    }
  }
}

/**
 * Redirect to delete page.
 */
function midleton_base_delete_student_confirm(&$form, &$form_state) {
  global $user;
  if (in_array(MIDLETON_BASE_COORDINATOR_ROLE, $user->roles)) {
    $destination = 'coordinator/student';
  }
  elseif (in_array(MIDLETON_BASE_CHIEF_COORDINATOR_ROLE, $user->roles)) {
    $destination = 'chief-coordinator/students';
  }
  else {
    $destination = 'midleton/students';
  }
  $_GET['destination'] = 'student/student/' . $form['#entity']->id . '/delete?destination=' . $destination;
}

/**
 * Submit callback to save node and redirect to status change confirmation.
 *
 * @param $form
 * @param $form_state
 */
function midleton_base_report_save_and_send_submit($form, &$form_state) {
  node_form_submit($form, $form_state);
  $form_state['redirect'] = 'send-report/' . $form_state['nid'];
  $_GET['destination'] = 'send-report/' . $form_state['nid'];
}

/**
 * Implements hook_node_insert().
 */
function midleton_base_node_presave($node) {

  $wrapper = entity_metadata_wrapper('node', $node);
  if( $wrapper->field_student_reference->__isset('field_name')){
    $node->title = node_type_get_name($node) . '-' . $wrapper->field_student_reference->field_name->value() . ' ' . $wrapper->field_student_reference->field_last_name->value();
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function midleton_base_field_formatter_info() {
  return [
    'midleton_options_as_stars' => [
      'label' => t('Options as stars'),
      'field types' => ['list_text', 'list_integer'],
    ],
    'midleton_status_formatter' => [
      'label' => t('Status formatter'),
      'field types' => ['list_text'],
    ],
  ];
}

/**
 * Implements hook_field_formatter_view().
 */

function midleton_base_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = [];
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'midleton_options_as_stars':
      if (isset($items[0]['value'])) {
        $element[0]['#markup'] = $items[0]['value'];
      }
      break;
    case 'midleton_status_formatter':
      if ($field['field_name'] == "field_status") {
        global $user;
        if (in_array(MIDLETON_BASE_COORDINATOR_ROLE, $user->roles)) {
          $value = $items[0]['value'];
          if ($value == "new") {
            $element[0]['#markup'] = t('Pending submission');
          }
          else {
            $element[0]['#markup'] = t('Submitted');
          }
        }
        elseif (in_array(MIDLETON_BASE_CHIEF_COORDINATOR_ROLE, $user->roles)) {
          $value = $items[0]['value'];
          if ($value == "new") {
            $element[0]['#markup'] = t('Pending submission');
          }
          else {
            $element[0]['#markup'] = t('Submitted');
          }
        }
        elseif (in_array(MIDLETON_MIDLETON_ROLE, $user->roles)) {
          $value = $items[0]['value'];
          if ($value == "new"  || $value == "approval_pending") {
            $element[0]['#markup'] = t('Pending approval');
          }
          elseif ($value == "approved") {
            $element[0]['#markup'] = t('Approved');
          }
          elseif ($value == "sent") {
            $element[0]['#markup'] = t('Sent to parents');
          }
        }
        else {
          $element[0]['#markup'] = $items[0]['value'];
        }
      }
      else {
        $element[0]['#markup'] = t('Formatter unsuitable for field.');
      }
  }
  return $element;
}

/**
 * Implements hook_field_attach_view_alter().
 */
function midleton_base_field_attach_view_alter(&$output, $context) {

  if (empty($context['view_mode']) || empty($context['display']) || $context['view_mode'] != $context['display']) {
    return;
  }
  $entity_type = $context['entity_type'];
  $entity = $context['entity'];
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  // Special switch when rendered using field_view_field().
  if ($context['view_mode'] == '_custom' && isset($context['display'])) {
    $view_mode = $context['display'];
  }
  else {
    $view_mode = $context['view_mode'];
  }

  foreach (field_info_instances($entity_type, $bundle) as $field_name => $instance) {

    $display = field_get_display($instance, $view_mode, $entity);

    $field = field_info_field($field_name);

    if ($display['type'] != 'midleton_options_as_stars') {
      continue;
    }

    if (!field_access('view', $field, $entity_type, $entity)) {
      continue;
    }

    $options = $field['settings']['allowed_values'];
    $markup = '';
    $highlighted = TRUE;
    global $base_url;
    foreach ($options as $delta => $option) {
      if ($output[$field['field_name']][0]['#markup'] == '-') {
        $markup .= '<span class="star"><img src="' . $base_url . '/' . drupal_get_path('module', 'midleton_base') . '/images/star.png"/></span>';
      }
      elseif ($output[$field['field_name']][0]['#markup'] == $option) {
        $markup .= '<span class="star selected"><img src="' . $base_url . '/' . drupal_get_path('module', 'midleton_base') . '/images/star-selected.png"/></span>';
        $highlighted = FALSE;
      }
      elseif ($highlighted) {
        $markup .= '<span class="highlighted star"><img src="' . $base_url . '/' . drupal_get_path('module', 'midleton_base') . '/images/star-selected.png"/></span>';
      }
      else {
        $markup .= '<span class="star"><img src="' . $base_url . '/' . drupal_get_path('module', 'midleton_base') . '/images/star.png"/></span>';
      }
    }
    $output[$field['field_name']][0]['#markup'] = $markup;
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function midleton_base_field_extra_fields() {
  $extra['student']['student'] = [
    'display' => [
      'report_history' => [
        'label' => t('Report history'),
        'description' => t('Report history view'),
        'weight' => 99,
      ],
      'email_history' => [
        'label' => t('Email history'),
        'description' => t('Email history view'),
        'weight' => 99,
      ],
    ],
  ];
  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function midleton_base_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == "student") {

    //Report history
    $markup = '<div class="field__label" id="reports">' . t('Reports') . '</div>';
    $markup .= views_embed_view('student_history');
    $entity->content['report_history']['#markup'] = $markup;

    //Email history
    $markup = '<div class="field__label" id="emails">' . t('Emails') . '</div>';
    $markup .= views_embed_view('email_history');
    $entity->content['email_history']['#markup'] = $markup;
  }
}

/**
 * Returns the list of report content types.
 */
function midleton_base_get_report_types() {
  $types = node_type_get_types();
  return $types;
}

/**
 * Implements hook_meun_local_tasks_alter().
 */
function midleton_base_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  $links = [
    'node/add' => t('Add report'),
    'admin/structure/entity-type/student/student/add' => t('Add student'),
    'admin/people/create' => t('Add coordinator'),
    'admin/structure/taxonomy/school_year/add' => t('Add school year'),

  ];

  // Exclude disabled paths.
  $current_system_path = menu_get_item(current_path())['path'];
  $disabled_paths = [
    'send-report/%',
  ];

  if (!in_array($current_system_path, $disabled_paths)) {
    foreach ($links as $uri => $title) {
      $item = menu_get_item($uri);
      if ($item['access']) {
        $data['actions']['output'][] = [
          '#theme' => 'menu_local_task',
          '#link' => [
            'title' => $title,
            'href' => $uri,
            'localized_options' => [
              'attributes' => [
                'title' => $title,
                'class' => [drupal_clean_css_identifier($uri)],
              ],
            ],
          ],
        ];
      }
    }
  }
}

/**
 * Dissalow user view page.
 */
function _midleton_base_user_view_access($account) {
  global $user;
  if (1 != $user->uid) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * PDF Download page callback
 *
 * @return \Dompdf\Dompdf
 */
function midleton_base_pdf($node) {

  // Generate PDF.
  $dompdf_path = $path = libraries_get_path('dompdf');

  require_once($dompdf_path . "/autoload.inc.php");

  $view = node_view($node, 'default');
  $wrapper = entity_metadata_wrapper('node', $node);
  $type = midleton_base_get_report_types()[$wrapper->getBundle()];
  $report_date = format_date($node->created, 'custom', 'jS \o\f F Y');
  $student = $wrapper->field_student_reference->value();
  $student_view = entity_view('student', [$student], 'teaser');
  $student_name = $wrapper->field_student_reference->field_name->value() . ' ' . $wrapper->field_student_reference->field_last_name->value();

  $html = theme('midleton_pdf', [
    '#theme' => 'pdf',
    '#node' => $view,
    '#student' => $student_view,
    '#student_name' => $student_name,
    '#report' => $type->name,
    '#report_date' => $report_date,
  ]);

  $options = new \Dompdf\Options();
  $options->setIsRemoteEnabled(TRUE);
  $options->isHtml5ParserEnabled(TRUE);
  $options->setIsPhpEnabled(TRUE);
  $dompdf = new \Dompdf\Dompdf($options);


  $dompdf->loadHtml($html);
  $dompdf->setPaper('A4');
  $dompdf->render();

  return $dompdf;

}

/**
 * Computed property for PDF link.
 */
function midleton_base_pdf_link($node) {
  if (!empty($node->field_pdf)) {
    $file = entity_load_single('file', $node->field_pdf[LANGUAGE_NONE][0]['fid']);
    $path = file_entity_download_uri($file);
    if (entity_access('view', 'file', $file)) {
      return l(t('PDF'), $path['path'], $path['options']);
    }
  }
}


/**
 * Computed property for PDF link.
 */
function midleton_base_pdf_generate_link($node) {
  $menu = menu_get_item('generate-pdf/' . $node->nid);
  $wrapper = entity_metadata_wrapper('node', $node);
  if ($menu['access']) {
    if (!empty($wrapper->field_pdf->value())) {
      $text = t('Recreate PDF');
    }
    else {
      $text = t('Generate PDF');
    }
    return l($text, 'generate-pdf/' . $node->nid, ['query' => drupal_get_destination()]);
  }
}


/**
 * Computed value for change status button.
 */
function midleton_base_change_status_button($node) {
  $link = menu_get_item('send-report/' . $node->nid);
  if ($link['access']) {
    $status = $node->field_status[LANGUAGE_NONE][0]['value'];
    switch ($status) {
      case 'new':
        $label = t('Submit to Manager');
        break;

      case 'approval_pending':
        $label = t("Approve");
        break;

      case 'approved':
        $label = t("Send to Agnecy");
        break;

      case 'sent':
        $label = t("Email sent");
        break;
    }
    return l($label, $link['href'], [
      'query' => drupal_get_destination(),
      'html' => TRUE
    ]);
  }
  return FALSE;
}

/**
 * Implements hook_init().
 *
 * Set messages for warnings.
 *
 * Add back button for certain paths.
 */
function midleton_base_init() {
  if (!user_is_anonymous()) {
    $types = midleton_base_get_report_types();

    // Deadline for adding students.
    if (user_access('add student student entities')) {

      if (variable_get('midleton_base_show_add_students_deadline_message', FALSE)) {

        $date = DateTime::createFromFormat('Y-m-d', variable_get('midleton_base_deadline_add_students_date'));
        $time_stamp = $date->getTimestamp();
        $current_date = REQUEST_TIME;
        $diff = floor($time_stamp / (60 * 60 * 24)) - floor($current_date / (60 * 60 * 24));


        if ($diff > 0 && $diff < variable_get('midleton_base_deadline_add_students_days')) {
          $message_single_day = variable_get('midleton_base_student_message_single_day');
          $message_mutiple_days = variable_get('midleton_base_student_message_multiple_days');
          $message = format_plural($diff, $message_single_day, $message_mutiple_days);
          drupal_set_message($message, 'status', FALSE);
        }
      }
    }
    // Deadline for uploading reports.
    foreach ($types as $type_name => $type) {
      if (variable_get('midleton_base_show_send_reports_deadline_message_' . $type_name)) {
        $date = DateTime::createFromFormat('Y-m-d', variable_get('midleton_base_show_deadline_send_reports_date_' . $type_name));
        $time_stamp = $date->getTimestamp();
        $current_date = REQUEST_TIME;
        $diff = floor($time_stamp / (60 * 60 * 24)) - floor($current_date / (60 * 60 * 24));
        if ($diff > 0 && $diff < variable_get('midleton_base_deadline_send_reports_days_' . $type_name)) {
          global $user;
          if (in_array(MIDLETON_BASE_COORDINATOR_ROLE, $user->roles)) {
            $query = new EntityFieldQuery();
            $result = $query->entityCondition('entity_type', 'student')
              ->fieldCondition('field_coordinator', 'target_id', $user->uid)
              ->execute();
          }
          elseif (in_array(MIDLETON_BASE_CHIEF_COORDINATOR_ROLE, $user->roles)) {
            $query = new EntityFieldQuery();
            $result = $query->entityCondition('entity_type', 'user')
              ->fieldCondition('field_user_superior', 'target_id', $user->uid)
              ->execute();

            $query = new EntityFieldQuery();
            $result = $query->entityCondition('entity_type', 'student')
              ->fieldCondition('field_coordinator', 'target_id', array_keys($result['user']), 'IN')
              ->execute();

          }
          else {
            $query = new EntityFieldQuery();
            $result = $query->entityCondition('entity_type', 'student')
              ->execute();
          }

          $reports_pending = [];
          $statusses = [
            'approval_pending',
            'approved',
            'sent',
          ];
          if (!empty($result['student'])) {
            foreach (array_keys($result['student']) as $student_id) {
              $query = new EntityFieldQuery();
              $result = $query->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', $type_name)
                ->fieldCondition('field_status', 'value', $statusses, 'IN')
                ->fieldCondition('field_student_reference', 'target_id', $student_id)
                ->execute();
              if (empty($result)) {
                $student = entity_load_single('student', $student_id);
                $wrapper = entity_metadata_wrapper('student', $student);
                $reports_pending[] = $wrapper->field_name->value() . ' ' . $wrapper->field_last_name->value();
              }
            }
          }
          $message_single_day = variable_get('midleton_base_send_reports_message_single_day_' . $type_name);
          $message_multiple_days = variable_get('midleton_base_send_reports_message_multiple_days_' . $type_name);
          if (!empty($reports_pending) && count($reports_pending) < 10) {
            $message = format_plural($diff, $message_single_day, $message_multiple_days, ['@students' => implode(', ', $reports_pending)]);
          }
          elseif (!empty($reports_pending) && count($reports_pending) >= 10) {
            $message = format_plural($diff, $message_single_day, $message_multiple_days, ['@students' => t('More than 10 students pending.')]);
          }
          else {
            $message = format_plural($diff, $message_single_day, $message_multiple_days, ['@students' => t('No students pending')]);
          }
          drupal_set_message($message, 'status', FALSE);
        }
      }
    }
  }

  $item = menu_get_item();
  $paths = [
    'admin/structure/entity-type/student/student/%/edit',
    'user/%/edit',
    'taxonomy/term/%/edit',
    'node/%',
    'node/%/edit',
    'admin/structure/taxonomy/%/add',
    'admin/people/create',
    'send-report/%',
    'node/add',
    'admin/structure/entity-type/student/student/add',
  ];
  $node_types = node_type_get_types();
  foreach (array_keys($node_types) as $type) {
    $paths[] = 'node/add/' . drupal_html_class($type);
  }
  if (in_array($item['path'], $paths)) {
    drupal_add_js(drupal_get_path('module', 'midleton_base') . '/js/back-button.js');
  }
}

/**
 * Implements hook_theme().
 */
function midleton_base_theme($existing, $type, $theme, $path) {
  return [
    'midleton_pdf' => [
      'variables' => [
        'node' => NULL,
        'student' => NULL,
        'student_name' => NULL,
        'report' => NULL,
        'report_date' => NULL,
      ],
      'template' => 'pdf',
      'path' => $path . '/templates',
    ],
    'midleton_message_form' => [
      'render element' => 'form',
      'template' => 'message-settings-form',
      'path' => $path . '/templates',
    ]
  ];
}


/**
 * Implements hook_form_FORM_ID_alter()
 */
function midleton_base_form_user_profile_form_alter(&$form, &$form_state) {
  midleton_base_form_user_profile_edit_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function midleton_base_form_user_register_form_alter(&$form, &$form_state) {
  midleton_base_form_user_profile_edit_form_alter($form, $form_state);
}

/**
 * Helper function to alter the profile.
 */
function midleton_base_form_user_profile_edit_form_alter(&$form, &$form_state) {
  global $user;
  $chief_rid = user_role_load_by_name(MIDLETON_BASE_CHIEF_COORDINATOR_ROLE)->rid;
  $coordinator_rid = user_role_load_by_name(MIDLETON_BASE_COORDINATOR_ROLE)->rid;
  $midleton_role = user_role_load_by_name(MIDLETON_MIDLETON_ROLE)->rid;
  $form['account']['roleassign_roles']['#required'] = TRUE;
  $form['mimemail']['#access'] = FALSE;
  if (user_has_role($chief_rid, $user)) {
    if ($form['#user']->uid != $user->uid) {
      $form['#submit'][] = 'midleton_base_user_profile_auto_assign_chief_coordinator';
      unset($form['account']['roleassign_roles']['#options'][$midleton_role]);
      unset($form['account']['roleassign_roles']['#options'][$chief_rid]);
      $form['account']['roleassign_roles']['#default_value'] = [$coordinator_rid];
      $form['account']['roleassign_roles']['#disabled'] = TRUE;
    }
  }
}

/**
 * Callback function for when the manager creates coordinators.
 *
 * @param $form
 * @param $form_state
 */
function midleton_base_user_profile_auto_assign_chief_coordinator(&$form, &$form_state) {
  global $user;
  $account = $form['#user'];
  $account->field_user_superior[LANGUAGE_NONE][0]['target_id'] = $user->uid;
  user_save($account);
  drupal_set_message(t('Succesfully assigned %name as manager to user %user', [
    '%name' => $user->name,
    '%user' => $account->name
  ]));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function midleton_base_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  $form['description']['#access'] = FALSE;
  $form['relations']['#access'] = FALSE;
  $form['#submit'][] = 'midleton_base_school_year_redirect_to_overview';
}

/**
 * Callback to redirect to overview page.
 */
function midleton_base_school_year_redirect_to_overview(&$form, &$form_state) {
  $form_state['redirect'] = 'midleton/school-year';
}

/**
 * Implements hook_file_entity_access().
 *
 * Grant access based on the entity this file has been used in.
 */
function midleton_base_file_entity_access($op, $file, $account) {
  if ($op == "create") {
    return FILE_ENTITY_ACCESS_IGNORE;
  }
  else {
    $usage = file_usage_list($file);
    if (empty($usage)) {
      return FILE_ENTITY_ACCESS_DENY;
    }
    elseif (isset($usage['file']['document'])) {
      $document = entity_load_single('document', array_keys($usage['file']['document'])[0]);
      return entity_access($op, 'document', $document, $account) ? FILE_ENTITY_ACCESS_ALLOW : FILE_ENTITY_ACCESS_DENY;
    }
    elseif (isset($usage['file']['student'])) {
      $student = entity_load_single('student', array_keys($usage['file']['student'])[0]);
      return entity_access($op, 'student', $student, $account) ? FILE_ENTITY_ACCESS_ALLOW : FILE_ENTITY_ACCESS_DENY;
    }
    elseif (isset($usage['file']['node'])) {
      $node = entity_load_single('node', array_keys($usage['file']['node'])[0]);
      return node_access('view', $node, $account) ? FILE_ENTITY_ACCESS_ALLOW : FILE_ENTITY_ACCESS_DENY;
    }
    else {
      return FILE_ENTITY_ACCESS_DENY;
    }
  }
}

/**
 * Implements hook_entityreference_view_widget_views_arguments_alter().
 * @param $arguments
 * @param $form_state
 * @param $view
 */
function midleton_base_entityreference_view_widget_views_arguments_alter(&$arguments, $form_state, $view) {
  if ($view->name == "midleton_add_documents" || $view->name == "midleton_add_reports") {
    $email = $form_state['email'];
    $student = $email->field_student_email_reference[LANGUAGE_NONE][0]['target_id'];
    array_unshift($arguments, (int) $student);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add submit callback to email ECK form.
 */
function midleton_base_form_eck__entity__form_edit_email_email_alter(&$form, &$form_state) {
  module_load_include('inc', 'midleton_base', 'includes/midleton_base.pages');
  $form['#submit'][] = 'midleton_base_send_email_form_submit';
}

/**
 * Implements hook_eck_entity_save_message_alter().
 */
function midleton_base_eck_entity_save_message_alter(&$msg, $args, $context) {
  $msg = '';
}


/**
 * Implements hook_mail().
 */
function midleton_base_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function midleton_base_form_views_exposed_form_alter(&$form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'midleton_base').'/js/midleton_base.exposed-filters.js');
  if (isset($form['field_status_value'])) {
    switch ($form_state['view']->name) {
      case 'midleton_coordinator':
        $form['field_status_value']['#options'] = [
          'All' => t('- Any -'),
          'new' => t('Pending submission'),
          'revision_pending' => t('Submitted'),
        ];
        break;
      case 'midleton_coordinator_chief':
        $form['field_status_value']['#options'] = [
          'All' => t('- Any -'),
          'revision_pending' => t('Pending submission'),
          'approval_pending' => t('Submitted'),
        ];
        break;
      case 'midleton_madrid':
        $form['field_status_value']['#options'] = [
          'All' => t('- Any -'),
          'approval_pending' => t('Pending approval'),
          'approved' => t('Approved'),
          'sent' => t('Sent to parents')
        ];
        break;
    }
  }
}


/**
 * Implements hook_views_query_alter().
 */
function midleton_base_views_query_alter(&$view, &$query) {
  switch ($view->name) {
    case 'midleton_coordinator':
      if ($query->where[1]['conditions'][1]['value'] == "revision_pending") {
        $query->where[1]['conditions'][1]['value'] = [
          'revision_pending',
          'approval_pending',
          'approved',
          'sent',
        ];
        $query->where[1]['conditions'][1]['operator'] = 'IN';
      }
      break;
    case 'midleton_coordinator_chief':
      if ($query->where[1]['conditions'][1]['value'] == "revision_pending") {
        $query->where[1]['conditions'][1]['value'] = [
          'new',
          'revision_pending',
        ];
        $query->where[1]['conditions'][1]['operator'] = 'IN';
      }
      if ($query->where[1]['conditions'][1]['value'] == "approval_pending") {
        $query->where[1]['conditions'][1]['value'] = [
          'approval_pending',
          'approved',
          'sent',
        ];
        $query->where[1]['conditions'][1]['operator'] = 'IN';
      }
      break;
    case 'midleton_madrid':
      if (isset($query->where[1]) && isset($query->where[1]['conditions'][1])) {
        if ($query->where[1]['conditions'][1]['value'] == "approval_pending") {
          $query->where[1]['conditions'][1]['value'] = [
            'new',
            'revision_pending',
            'approval_pending',
          ];
          $query->where[1]['conditions'][1]['operator'] = 'IN';
        }
      }
      break;
  }
}

/**
 * Implement hook_views_pre_build();
 */
function midleton_base_views_pre_build(&$view) {
  // Save table sort to sessions.
  $view_name = $view->name . '_' . $view->current_display;
  if (!empty($_GET['order']) && !empty($_GET['sort'])) {
    $_SESSION['order_by'][$view_name] = [
      "order" => $_GET['order'],
      'sort' => $_GET['sort']
    ];
  }
  elseif (!empty($_POST) && empty($_GET['order']) && !empty($_SESSION['order_by'][$view_name])) {
    unset($_SESSION['order_by'][$view_name]);
  }

  if (!empty($_SESSION['order_by'][$view_name])) {
    $field_name = $_SESSION['order_by'][$view_name]['order'];
    foreach ($view->display as $display_name => $display) {
      if ($display->display_options['style_plugin'] == "table") {
        if ($display->display_options['style_options']['info'][$field_name]['sortable']) {
          $display->display_options['style_options']['default'] = $field_name;
          $view->display[$display_name] = $display;
        }
      }
    }
  }
}

/**
 * Implements hook_views_plugins_alter().
 */
function midleton_base_views_plugins_alter(&$plugins) {
  $plugins['style']['table']['handler'] = 'midleton_base_plugin_style_table';
}


/**
 * Implements hook_views_post_render().
 *
 * Add export link to view.
 */
function midleton_base_views_post_render(&$view, &$output, &$cache) {
  if ($view->name == "midleton_madrid_coordinators_and_students" && $view->current_display == "students") {
    $link = menu_get_item('export');
    if ($link['access']) {
      $output = l(t('Export to XLS'), 'export', [
          'attributes' => [
            'class' => [
              'button',
              'export'
            ]
          ]
        ]) . $output;
    }
  }
}

/**
 * Submit callback for the Change report status form.
 */
function midleton_base_reset_pdf_form_submit($form, &$form_state) {
  $node = $form['#node'];
  $wrapper = entity_metadata_wrapper('node', $node);
  if (!empty($wrapper->field_pdf->value())) {
    $file = file_load($node->field_pdf[LANGUAGE_NONE][0]['fid']);
    file_delete($file);
    unset($node->field_pdf[LANGUAGE_NONE][0]);
    node_save($node);
    drupal_set_message(t('You need to manually regenerate the PDF.'));
  }
}

/**
 * Set current year and month as default values.
 * @param $form
 * @param $form_state
 */
function midleton_base_form_parent_teacher_meeting_node_form_alter(&$form, &$form_state){
  if(!$form['field_ptm_month'][LANGUAGE_NONE]['#default_value']){
    $form['field_ptm_month'][LANGUAGE_NONE]['#default_value'][] = date('n');
  }
  if(!$form['field_ptm_year'][LANGUAGE_NONE]['#default_value']){
    $form['field_ptm_year'][LANGUAGE_NONE]['#default_value'][] = date('Y');
  }
}
